From 95c07a21f6cb94852f9e3915b39c5806072647e5 Mon Sep 17 00:00:00 2001
From: mauve <ranger@mauve.moe>
Date: Thu, 24 Mar 2022 18:30:30 -0400
Subject: [PATCH] AG Start IPFS daemon on activity start

---
 chrome/android/chrome_java_sources.gni        |   2 +
 chrome/android/java/AndroidManifest.xml       |   8 ++
 .../java/AndroidManifest_trichrome_chrome.xml |   2 +-
 .../values/channel_constants.xml              |   1 +
 .../mauve/agregore/mobile/IPFSService.java    | 121 ++++++++++++++++++
 .../mauve/agregore/mobile/IPFSStarter.java    |  94 ++++++++++++++
 .../chrome/browser/app/ChromeActivity.java    |  12 ++
 7 files changed, 239 insertions(+), 1 deletion(-)
 create mode 100644 chrome/android/java/src/moe/mauve/agregore/mobile/IPFSService.java
 create mode 100644 chrome/android/java/src/moe/mauve/agregore/mobile/IPFSStarter.java

diff --git a/chrome/android/chrome_java_sources.gni b/chrome/android/chrome_java_sources.gni
index 02df4dd5b9121..0c62bb8104203 100644
--- a/chrome/android/chrome_java_sources.gni
+++ b/chrome/android/chrome_java_sources.gni
@@ -1134,4 +1134,6 @@ chrome_java_sources = [
   "java/src/org/chromium/chrome/browser/webapps/launchpad/LaunchpadUtils.java",
   "java/src/org/chromium/chrome/browser/webauth/authenticator/CableAuthenticatorActivity.java",
   "java/src/org/chromium/chrome/browser/webshare/ShareServiceImplementationFactory.java",
+  "java/src/moe/mauve/agregore/mobile/IPFSService.java",
+  "java/src/moe/mauve/agregore/mobile/IPFSStarter.java",
 ]
diff --git a/chrome/android/java/AndroidManifest.xml b/chrome/android/java/AndroidManifest.xml
index f64b00cd6a00d..cb0141daa6798 100644
--- a/chrome/android/java/AndroidManifest.xml
+++ b/chrome/android/java/AndroidManifest.xml
@@ -915,6 +915,14 @@ by a child template that "extends" this file.
             android:exported="false">
         </service>
 
+        <!-- IPFS daemon srevice -->
+        <service
+            android:name="moe.mauve.agregore.mobile.IPFSService"
+            android:exported="false"
+            android:label="@string/ipfs_service_title"
+            android:process=":ipfs_service"
+        />
+
         <!-- Quick Action Search widget -->
         <receiver
             android:name="org.chromium.chrome.browser.quickactionsearchwidget.QuickActionSearchWidgetProvider$QuickActionSearchWidgetProviderSearch"
diff --git a/chrome/android/java/AndroidManifest_trichrome_chrome.xml b/chrome/android/java/AndroidManifest_trichrome_chrome.xml
index 40cdccab4317b..609281c83d972 100644
--- a/chrome/android/java/AndroidManifest_trichrome_chrome.xml
+++ b/chrome/android/java/AndroidManifest_trichrome_chrome.xml
@@ -9,7 +9,7 @@
 {% block extra_application_attributes %}
 {{ super() }}
 android:multiArch="true"
-android:extractNativeLibs="false"
+android:extractNativeLibs="true"
 {{use32bitAbi|default('')}}
 {% endblock %}
 
diff --git a/chrome/android/java/res_chromium_base/values/channel_constants.xml b/chrome/android/java/res_chromium_base/values/channel_constants.xml
index 45e0ea84a3088..2d2ea32b4b707 100644
--- a/chrome/android/java/res_chromium_base/values/channel_constants.xml
+++ b/chrome/android/java/res_chromium_base/values/channel_constants.xml
@@ -10,4 +10,5 @@
     <string name="search_widget_title" translatable="false">Search</string>
     <string name="quick_action_search_widget_title" translatable="false">Quick action search</string>
     <string name="dino_widget_title" translatable="false">Dino</string>
+    <string name="ipfs_service_title" translatable="false">IPFS Service</string>
 </resources>
diff --git a/chrome/android/java/src/moe/mauve/agregore/mobile/IPFSService.java b/chrome/android/java/src/moe/mauve/agregore/mobile/IPFSService.java
new file mode 100644
index 0000000000000..7fa837049607e
--- /dev/null
+++ b/chrome/android/java/src/moe/mauve/agregore/mobile/IPFSService.java
@@ -0,0 +1,121 @@
+package moe.mauve.agregore.mobile;
+
+import android.app.Service;
+import android.os.Messenger;
+import android.os.IBinder;
+import android.os.Message;
+import android.os.Handler;
+import android.content.Context;
+import android.content.Intent;
+import android.content.ComponentName;
+import android.content.ServiceConnection;
+import android.util.Log;
+
+import java.lang.ProcessBuilder;
+import java.lang.Process;
+import java.io.IOException;
+import java.io.FileNotFoundException;
+import java.io.File;
+import java.io.BufferedOutputStream;
+import java.io.InputStream;
+
+import org.chromium.chrome.R;
+
+public class IPFSService extends Service implements Handler.Callback {
+	/**
+	* Commands for the service to send over the Messenger
+	*/
+	public static final int START = 1;
+	public static final int STOP = 2;
+	public static final String TAG = "IPFSService";
+	public static final String COMMAND_NAME = "libagregoregateway.so";
+
+	/**
+	* Target we publish for clients to send messages to IncomingHandler.
+	*/
+	private Messenger messenger;
+	private ProcessBuilder gatewayRunner;
+	private Process gatewayProcess = null;
+
+	@Override
+	public boolean handleMessage(Message msg) {
+		int what = msg.what;
+		Log.d(TAG, "Got message from binder: ");
+		if(what == START) {
+				startProcess();
+				return true;
+		} else if(what == STOP) {
+				stopProcess();
+				return true;
+		} else {
+				Log.d(TAG, "Got unknown message type.");
+		}
+		// TODO: What if it's totally invalid?
+		return false;
+	}
+
+	public boolean isRunning() {
+		if(gatewayProcess == null) return false;
+		return gatewayProcess.isAlive();
+	}
+
+	public boolean isInitialized() {
+		return gatewayRunner != null;
+	}
+
+	public void initializeBinary() {
+		Log.i(TAG, "Initializing binary");
+		String cwd = getFilesDir().getPath() + "/";
+		String ipfsDataDirectory = cwd + "/ipfs/";
+		String binaryDirectory = getApplicationInfo().nativeLibraryDir;
+
+		String filePath = binaryDirectory + "/" + COMMAND_NAME;
+
+		// Set up process builder
+		gatewayRunner = new ProcessBuilder(filePath);
+		gatewayRunner.directory(new File(cwd));
+		gatewayRunner.environment().put("AGREGORE_IPFS_REPO", ipfsDataDirectory);
+		gatewayRunner.inheritIO();
+		Log.i(TAG, "Binary ready");
+	}
+
+	public void startProcess() {
+		Log.d(TAG, "startProcess()");
+		if(isRunning()) return;
+		if (!isInitialized()) {
+			initializeBinary();
+		}
+		try {
+			Log.i(TAG, "Running gateway process");
+			gatewayProcess = gatewayRunner.start();
+		} catch (IOException e) {
+			e.printStackTrace();
+		}
+	}
+
+	public void stopProcess() {
+		if(isRunning()) {
+			Log.d(TAG, "Destroying gateway process");
+			gatewayProcess.destroy();
+		}
+	}
+
+	/*
+		We should stop the process if the service is getting destroyed
+	*/
+	@Override
+	public void onDestroy() {
+		stopProcess();
+	}
+
+	/**
+	* When binding to the service, we return an interface to our messenger
+	* for sending messages to the service.
+	*/
+	@Override
+	public IBinder onBind(Intent intent) {
+	  // TODO: Use a dedicated looper? I think the service gets its own one, right?
+		messenger = new Messenger(new Handler(getMainLooper(), this));
+		return messenger.getBinder();
+	}
+}
diff --git a/chrome/android/java/src/moe/mauve/agregore/mobile/IPFSStarter.java b/chrome/android/java/src/moe/mauve/agregore/mobile/IPFSStarter.java
new file mode 100644
index 0000000000000..1e13a955e4f93
--- /dev/null
+++ b/chrome/android/java/src/moe/mauve/agregore/mobile/IPFSStarter.java
@@ -0,0 +1,94 @@
+package moe.mauve.agregore.mobile;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.ComponentName;
+import android.content.ServiceConnection;
+
+import android.os.Messenger;
+import android.os.IBinder;
+import android.os.Message;
+import android.os.RemoteException;
+
+import android.util.Log;
+
+public class IPFSStarter {
+	public static final String TAG = "IPFSStarter";
+	Context context = null;
+	Messenger messenger = null;
+	boolean isBound = false;
+	boolean shouldAutoStart = false;
+
+	/**
+	* Class for interacting with the main interface of the service.
+	*/
+	private ServiceConnection connectionListener = new ServiceConnection() {
+		public void onServiceConnected(ComponentName className, IBinder service) {
+			Log.d(TAG, "Service connected");
+			// This is called when the connection with the service has been
+			// established, giving us the object we can use to
+			// interact with the service.  We are communicating with the
+			// service using a Messenger, so here we get a client-side
+			// representation of that from the raw IBinder object.
+			messenger = new Messenger(service);
+			isBound = true;
+			if(shouldAutoStart) {
+				Log.d(TAG, "Autostarting");
+				sendStartGateway();
+			}
+		}
+
+		public void onServiceDisconnected(ComponentName className) {
+			Log.d(TAG, "Service disconnected");
+			// This is called when the connection with the service has been
+			// unexpectedly disconnected -- that is, its process crashed.
+			messenger = null;
+			isBound = false;
+		}
+	};
+
+	public boolean isBound() {
+		return isBound;
+	}
+
+	private void sendMessage(int type) {
+		if (!isBound) return; // TODO: Throw an error?
+		Message message = Message.obtain(null, type, 0, 0);
+		try {
+			messenger.send(message);
+		} catch (RemoteException e) {
+			e.printStackTrace();
+		}
+	}
+
+	public void sendStartGateway() {
+		this.sendMessage(IPFSService.START);
+	}
+
+	public void sendStopGateway() {
+		this.sendMessage(IPFSService.STOP);
+	}
+
+	public void loadService(Context binder) {
+		loadService(binder, false);
+	}
+
+	public void loadService(Context binder, boolean autoStart) {
+		// Don't bother loading if we're already loaded!
+		if (isBound) return;
+		Log.d(TAG, "Binding to service");
+		shouldAutoStart = autoStart;
+		context = binder;
+		Intent intent = new Intent(context, IPFSService.class);
+		context.bindService(intent, connectionListener, Context.BIND_AUTO_CREATE);
+	}
+
+	public void unloadService() {
+		if(context != null && isBound) {
+			Log.d(TAG, "Unbinding service");
+			context.unbindService(connectionListener);
+			context = null;
+		}
+	}
+}
+
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
index 7bab199f3d37e..63f843ca10e12 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
@@ -251,6 +251,8 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Consumer;
 
+import moe.mauve.agregore.mobile.IPFSStarter;
+
 /**
  * A {@link AsyncInitializationActivity} that builds and manages a {@link CompositorViewHolder}
  * and associated classes.
@@ -392,6 +394,9 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
     private boolean mLastPictureInPictureModeForTesting;
     private SubscriptionsManager mSubscriptionsManager;
 
+    // Agregore related variables
+    private IPFSStarter ipfs = new IPFSStarter();
+
     protected ChromeActivity() {
         mIntentHandler = new IntentHandler(this, createIntentHandlerDelegate());
         mManualFillingComponentSupplier.set(ManualFillingComponentFactory.createComponent());
@@ -1287,6 +1292,9 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
                     "Android.PlayServices.Version", playServicesVersion);
 
             FontSizePrefs.getInstance().recordUserFontPrefOnStartup();
+
+            // Load service and autostart the gateway
+            ipfs.loadService(this, true);
         });
 
         // GSA connection is not needed on low-end devices because Icing is disabled.
@@ -1541,6 +1549,10 @@ public abstract class ChromeActivity<C extends ChromeActivityComponent>
 
         mComponent = null;
 
+        if (ipfs.isBound()) {
+            ipfs.unloadService();
+        }
+
         super.onDestroy();
     }
 
-- 
2.32.0

